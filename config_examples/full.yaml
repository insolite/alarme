actions: # Define actions
  noop: # Do nothing
    class: 'alarme.Action'
  set_state: &set_state # Set current state
    class: 'alarme.extras.SetStateAction'
  set_state_start:
    <<: *set_state
    state_id: start
  set_state_pass:
    <<: *set_state
    state_id: pass
  set_state_stay:
    <<: *set_state
    state_id: stay
  set_state_guard:
    <<: *set_state
    state_id: guard
  set_state_alarm:
    <<: *set_state
    state_id: alarm
  email_base: &email_base # Base abstract E-mail action with SMTP connection details
    abstract: true
    class: 'alarme.extras.EmailAction'
    host: 'smtp.localhost'
    port: 587
    login: 'alarme-email@localhost'
    password: 'alarme-password'
    sender: 'Alarme <alarme-email@localhost>'
    recipient: 'your-email@localhost'
  email_alarm: # Send "alarm" E-mail
    <<: *email_base
    abstract: false
    subject: 'Alarm!'
    template: 'alarm'
  email_start: # Send "start" E-mail
    <<: *email_base
    abstract: false
    subject: 'Alarme start'
    text: 'Alarme has started'
  scream: # Play sound using speakers
    class: 'alarme.extras.SoundAction'
    sound: 'cydon.wav'
  gsm: &gsm # Base abstract GSM action with serial device details
    abstract: true
    serial_url: '/dev/ttyS0'
  call: # Make GSM call
    <<: *gsm
    abstract: false
    class: 'alarme.extras.CallAction'
    number: 'your-phone-number'
    seconds: 60
  sms: # Send GSM SMS
    <<: *gsm
    abstract: false
    class: 'alarme.extras.SmsAction'
    number: 'your-phone-number'
    text: 'Alarm'
sensors: # Define sensors
  remote: # Remote control with rf transmitter
    class: 'alarme.extras.RfReceiverSensor' # Use default rf receiver sensor class
    gpio: 27 # Receiver data output is connected to GPIO-27
    code: 12000 # Basic digital code is 12000. Channels are implemented through changing one bit (12001, 12002, 12004, 12008).
    behaviours: # Define which actions will be executed by receiving each xor'ed digital code
      1: set_state_stay # Button 1 - change state to `stay`
      2: set_state_pass # Button 2 - change state to `pass`
      4: set_state_guard # Button 3 - change state to `guard`
      8: set_state_alarm # Button 4 - change state to `alarm`
  movement: # Movement sensor with rf transmitter
    class: 'alarme.extras.RfReceiverSensor' # Use default rf receiver sensor class
    gpio: 27 # Receiver data output is connected to GPIO-27
    code: 13000 # Basic digital code
    behaviours: # Movement sensor transmitter does not use channels, it has a single base code
      0: set_state_alarm # Base code is not changed. Set `alarm` state by receiving this code by default.
  door: # Door open sensor with rf transmitter
    class: 'alarme.extras.RfReceiverSensor' # Use default rf receiver sensor class
    gpio: 27 # Receiver data output is connected to GPIO-27
    code: 14000 # Basic digital code
    behaviours: # Door open sensor transmitter does not use channels, it has a single base code
      0: set_state_alarm # Base code is not changed. Set `alarm` state by receiving this code by default.
  window: # Window open sensor with rf transmitter
    class: 'alarme.extras.RfReceiverSensor' # Use default rf receiver sensor class
    gpio: 27 # Receiver data output is connected to GPIO-27
    code: 15000 # Basic digital code
    behaviours: # Window open sensor transmitter does not use channels, it has a single base code
      0: set_state_alarm # Base code is not changed. Set `alarm` state by receiving this code by default.
  web: # Web server control
    class: 'alarme.extras.WebSensor' # Use default web server sensor class
    behaviours: # Define which actions web control panel can do by which notification code as a sensor
      start: set_state_start # Set `start` state
      pass: set_state_pass # Set `pass` state
      stay: set_state_stay # Set `stay` state
      guard: set_state_guard # Set `guard` state
      alarm: set_state_alarm # Set `alarm` state
    buttons: # Define control panel buttons - which code they send and how they look
      - behaviour: start # Code to notify as a sensor (defined in behaviours)
        label: Start # Button label
        style: start # CSS class
        order: 0 # Sort order in buttons list
      - behaviour: pass # Code to notify as a sensor (defined in behaviours)
        label: Pass # Button label
        style: pass # CSS class
        order: 1 # Sort order in buttons list
      - behaviour: stay # Code to notify as a sensor (defined in behaviours)
        label: Stay # Button label
        style: stay # CSS class
        order: 2 # Sort order in buttons list
      - behaviour: guard # Code to notify as a sensor (defined in behaviours)
        label: Guard # Button label
        style: guard # CSS class
        order: 3 # Sort order in buttons list
      - behaviour: alarm # Code to notify as a sensor (defined in behaviours)
        label: Alarm # Button label
        style: alarm # CSS class
        order: 4 # Sort order in buttons list
    host: '*' # Host for web server listening
    port: 8000 # Port for web server listening
    login: admin # Login to control panel
    password: admin # Password to control panel
    debug: true # Display detailed debug info about possible request errors on the web page
states: # Define states
  start: # Used to send notification E-mail about app start and set state to `pass`
    sensors: # React only for web sensor
      - web
    schedules: # Define schedules
      start: # Send start E-mail once and change state to `pass`
        actions: # Actions can be combined with order
          - email_start
          - set_state_pass
        run_count: 1
  pass: # Used to turn off automatic alarming by reacting for non-control sensors
    sensors: # Ignore all sensors except for `web` and `remote`
      - id: web # Sensors behaviour can be overridden
        behaviours:
          guard: # Actions with args can be inlined
            id: set_state
            state_id: guard
      - remote
    schedules: # Define schedules
      set_state: # Automatically set `stay` state after 30 seconds (time to open a door after setting `pass` state)
        actions:
          - set_state_stay
        run_count: 1
        delay: 30
  stay: # Used when owner is at guarding site to alarm on activating of "perimeter" sensors (e. g. door/window open sensors)
    sensors: # Ignore all sensors except for `web` and `remote` as usual and perimeter sensors: `door`, `window`
      - web
      - remote
      - door
      - window
  guard: # Used when nobody's at guarding site
    sensors: # React for all known sensors
      - web
      - remote
      - door
      - window
      - movement
  alarm: # Used just to continuously alarm
    reactivatable: false # Do not restart alarm schedule/actions
    sensors: # React for all known sensors just in case of unexpectedly stopping some schedule/action without state change
      - web
      - remote
      - door
      - window
      - movement
    schedules: # Alarm using all known actions
      email: # Send alarm E-mail
        actions: email_alarm # Single action can be written without list
        run_count: null
        run_interval: 60
      scream: # Play sound using speakers
        actions:
          - scream
        run_count: null
        run_interval: 1
      call: # Make GSM call
        actions:
          - call
        run_count: null
        run_interval: 3
        delay: 3
      sms: # Send GSM SMS
        actions:
          - sms
        run_count: 3
        run_interval: 20
initial_state: start # Set `start` state when alarme starts
